'use strict';
/**
 * Created by mdefrutosvila on 15/04/2014.
 *
 * @file MfControlbar.js
 *
 * @date 15/04/2014
 *
 * @brief ui component present at the top of the application
 *
 * Copyright (c) 2014 Sopra. All rights reserved.
 *
 */



/**
 * Directive : mf-controlbar
 *
 *
 *
 * Directive mandatory parameters :
 *      mf-home-state: state of the home screen (forward to this screen happens when click on home button)
 *
 *
 * Directive optional parameters :
 *      mf-title:               title of the controlbar, hidden on xs devices (default value: application name defined in the config XML file)
 *      mf-home-button :        false if you want to hide the home button (default value: true)
 *      mf-action-menu-button:  false if you want to hide the action menu button (default value: true)
 *      mf-sliding-menu-button: false if you want to hide the sliding menu button (default value: true)
 *      mf-back-button:         false if you want to hide the back button (default value: true)
 *      mf-hide-control-bar-title:   false if you want to force the display of the title on small screen (default value: true)
 *
 *
 * Controller mandatory parameters (in $scope.viewConfig) :
 *      controlBarType
 *      hideControlBar
 *      navigable
 *      exitState
 *      isList
 *      cancelable
 *      exitOnSaveOrCancel
 *
 *
 * Controller optional parameters (in $scope.viewConfig) :
 *      controlBarTitle:        title of the control bar
 *      saveAction:     save action
 *      deleteAction    delete action
 *
 *
 */
//TODO: add behaviors to buttons of the action menu

angular.module('mfui').directive('mfControlbar', ['MFDirectivesHelper', 'MFConfigurationService','MFInitConfiguration', 'snapRemote','$timeout',
                                                  function (MFDirectivesHelper, MFConfigurationService, MFInitConfiguration, snapRemote,$timeout) {

    return {
        restrict: 'E',

        replace: true,

        transclude: false,

        templateUrl: 'mfui/directives/MfControlbar/MfControlbar.html',

        controller: function controller($scope, $attrs){

            $scope.controlbar = {};

            MFDirectivesHelper.checkMandatoryStringAttributes($attrs, ['mfHomeState']);
            MFDirectivesHelper.checkOptionalBooleanAttributes($attrs, ['mfHomeButton','mfActionMenuButton','mfSlidingMenuButton', 'mfBackButton','mfHideControlBarTitle'], true);

            $scope.controlbar.defaultTitle = '';
            if(angular.isUndefinedOrNullOrEmpty($attrs.mfTitle)){
                MFInitConfiguration.onSuccess(function(){
                    $scope.controlbar.defaultTitle = MFConfigurationService.getValue('app_name','App generated by MDK');
                    //$scope.$apply();
                    //$scope.$broadcast('refreshMfTitle');
                });
            }
            else {
                $scope.controlbar.defaultTitle = $attrs.mfTitle;
            }

            $scope.controlbar.getTitleText = function(){
                if($scope.controlBarEnabled && $scope.$screenScope.viewConfig.screenConfig.controlBarTitle !== undefined) {
                    return $scope.$screenScope.viewConfig.screenConfig.controlBarTitle;
                } else {
                    return $scope.controlbar.defaultTitle;
                }
            };

            //hidden the controlbar title for xs devices if $scope.$screenScope.viewConfig.hideControlBarTitle

            $scope.controlbar.getCssShowTitle = function() {
                return {
//                    'hidden-xs-inline-block': $attrs.mfHideControlBarTitle
                };
            };


            //buttons show logic
            $scope.controlbar.buttonHome = function () {
                return $attrs.mfHomeButton;
            };
            $scope.controlbar.buttonBack = function () {
                return $scope.controlBarEnabled && $attrs.mfBackButton && $scope.rootActions.isBackable();
            };
            $scope.controlbar.buttonSave = function () {
                return $scope.controlBarEnabled && $scope.rootActions.isInEditionMode();
            };
            $scope.controlbar.buttonEdit = function () {
                return $scope.controlBarEnabled && $scope.rootActions.isEditable() && !$scope.rootActions.isInEditionMode();
            };
            $scope.controlbar.buttonCancel = function () {
                return $scope.controlBarEnabled && $scope.rootActions.isInEditionMode() && $scope.rootActions.isCancelable();
            };
            $scope.controlbar.buttonRemove = function () {
                return $scope.controlBarEnabled && $scope.rootActions.isRemovable() && !$scope.rootActions.isInEditionMode();
            };
            $scope.controlbar.buttonAdd = function () {
                return $scope.controlBarEnabled && $scope.rootActions.canAddToList();
            };
            $scope.controlbar.buttonActionMenu = function () {
                return $scope.controlBarEnabled && $attrs.mfActionMenuButton;
            };
            $scope.controlbar.buttonSlidingMenu = function () {
                return $scope.controlBarEnabled && $attrs.mfSlidingMenuButton && $scope.rootActions.isExitable();
            };


            $scope.controlbar.snapClosed = true;
            snapRemote.getSnapper().then(function(snapper) {
                 snapper.on('open', function() {
                     $scope.controlbar.snapClosed = false;
                 });
                 snapper.on('close', function() {
                     $scope.controlbar.snapClosed = true;
                 });
            });
            $scope.controlbar.getCssSnap = function getCssSnapPressed() {
                return {
                    'button-snap-opened': !$scope.controlbar.snapClosed,
                    'button-snap-closed': $scope.controlbar.snapClosed
                };
            };

            //buttons actions logic
            $scope.controlbar.goHome = function () {
                if($scope.rootActions.isExitable()) {
                    $scope.rootActions.go($attrs.mfHomeState);
                }
            };
            $scope.controlbar.goBack = function () {
                $scope.rootActions.goBack();
            };

            $scope.controlbar.goSave = function () {
                $scope.rootActions.save();
            };

            $scope.controlbar.goEdit = function () {
                $scope.rootActions.goInEditionMode();
            };

            $scope.controlbar.goCancel = function () {
                $scope.rootActions.cancel();
            };

            $scope.controlbar.goAdd = function () {
                $scope.rootActions.navigateNew();
            };
            $scope.controlbar.goRemove = function () {
                $scope.rootActions.remove();
            };
        }

    // compile: function compile(tElement, tAttrs) {
    // 	return {
    // 		pre: function preLink(scope, iElement, iAttrs, formController) {
    // 		},
    // 		post: function postLink(scope, iElement, iAttrs, formController) {
    // 		}
    // 	};
    // }
    };

}]);
