/**
 * Copyright (C) 2016 Sopra Steria Group (movalys.support@soprasteria.com)
 *
 * This file is part of Movalys MDK.
 * Movalys MDK is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * Movalys MDK is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with Movalys MDK. If not, see <http://www.gnu.org/licenses/>.
 */
'use strict';

/**
 * Directive : mf-controlbar
 *
 *
 *
 * Directive mandatory parameters :
 *      mf-home-state: state of the home screen (forward to this screen happens when click on home button)
 *
 *
 * Directive optional parameters :
 *      mf-title:               title of the controlbar, hidden on xs devices (default value: application name defined in the config XML file)
 *      mf-home-button :        false if you want to hide the home button (default value: true)
 *      mf-action-menu-button:  false if you want to hide the action menu button (default value: true)
 *      mf-sliding-menu-button: false if you want to hide the sliding menu button (default value: true)
 *      mf-back-button:         false if you want to hide the back button (default value: true)
 *      mf-hide-control-bar-title:   false if you want to force the display of the title on small screen (default value: true)
 *
 *
 * Controller mandatory parameters (in $scope.viewConfig) :
 *      controlBarType
 *      hideControlBar
 *      navigable
 *      exitState
 *      isList
 *      cancelable
 *      exitOnSaveOrCancel
 *
 *
 * Controller optional parameters (in $scope.viewConfig) :
 *      controlBarTitle:        title of the control bar
 *      saveAction:     save action
 *      deleteAction    delete action
 *
 *
 */

angular.module('mfui').directive('mfControlbar', ['MFDirectivesHelper', 'MFConfigurationService', 'MFInitConfiguration', 'snapRemote',
    function (MFDirectivesHelper, MFConfigurationService, MFInitConfiguration, snapRemote) {
        var loSnapper;
        return {
            restrict: 'E',

            transclude: false,

            templateUrl: 'mfui/directives/MfControlbar/MfControlbar.html',

            controller: function controller($scope, $attrs) {

                $scope.controlbar = {};

                MFDirectivesHelper.checkMandatoryStringAttributes($attrs, ['mfHomeState']);
                MFDirectivesHelper.checkOptionalBooleanAttributes($attrs, ['mfHomeButton', 'mfActionMenuButton', 'mfSlidingMenuButton', 'mfBackButton'], true);
                MFDirectivesHelper.checkOptionalBooleanAttributes($attrs, ['mfHideControlBarTitle'], false);

                $scope.controlbar.defaultTitle = '';
                if (angular.isUndefinedOrNullOrEmpty($attrs.mfTitle)) {
                    MFInitConfiguration.onSuccess(function () {
                        $scope.controlbar.defaultTitle = MFConfigurationService.getValue('app_name', 'App generated by MDK');
                    });
                }
                else {
                    $scope.controlbar.defaultTitle = $attrs.mfTitle;
                }

                $scope.controlbar.getTitleText = function () {
                    if ($scope.controlBarEnabled && $scope.$screenScope.viewConfig.screenConfig.controlBarTitle !== undefined) {
                        return $scope.$screenScope.viewConfig.screenConfig.controlBarTitle;
                    } else {
                        return $scope.controlbar.defaultTitle;
                    }
                };

                //hidden the controlbar title for xs devices if $scope.$screenScope.viewConfig.hideControlBarTitle

                $scope.controlbar.getCssShowTitle = function () {
                    return {
                        'hidden-xs-inline-block': $attrs.mfHideControlBarTitle
                    };
                };


                //buttons show logic
                $scope.controlbar.buttonHome = function () {
                    return $attrs.mfHomeButton;
                };
                $scope.controlbar.buttonBack = function () {
                    return $scope.controlBarEnabled && $attrs.mfBackButton && $scope.rootActions.isBackable();
                };
                $scope.controlbar.buttonSave = function () {
                    return ($scope.controlBarEnabled && $scope.rootActions.isInEditionMode() && $scope.rootActions.isEditable()) || ($scope.rootActions.isEditable() && $scope.rootActions.isForceInEditionMode());
                };
                $scope.controlbar.buttonEdit = function () {
                    return $scope.controlBarEnabled && $scope.rootActions.isEditable() && !$scope.rootActions.isInEditionMode() && !$scope.rootActions.isForceInEditionMode();
                };
                $scope.controlbar.buttonCancel = function () {
                    return $scope.controlBarEnabled && $scope.rootActions.isInEditionMode() && $scope.rootActions.isCancelable() && !$scope.rootActions.isForceInEditionMode();
                };
                $scope.controlbar.buttonRemove = function () {
                    return ($scope.controlBarEnabled && $scope.rootActions.isRemovable() && !$scope.rootActions.isInEditionMode()) || ($scope.rootActions.isRemovable() && $scope.rootActions.isForceInEditionMode());
                };
                $scope.controlbar.buttonSlidingMenu = function () {
                    return $scope.controlBarEnabled && $attrs.mfSlidingMenuButton && $scope.rootActions.isExitable();
                };


                $scope.controlbar.snapClosed = true;
                snapRemote.getSnapper().then(function (snapper) {
                    snapper.on('open', function () {
                        $scope.controlbar.snapClosed = false;
                    });
                    snapper.on('close', function () {
                        $scope.controlbar.snapClosed = true;
                    });
                    loSnapper = snapper;
                });
                $scope.controlbar.getCssSnap = function getCssSnapPressed() {
                    return {
                        'button-snap-opened': !$scope.controlbar.snapClosed,
                        'button-snap-closed': $scope.controlbar.snapClosed
                    };
                };

                //buttons actions logic
                $scope.controlbar.goHome = function () {
                    if ($scope.rootActions.isExitable()) {
                        $scope.rootActions.go($attrs.mfHomeState);
                    }
                };
                $scope.controlbar.goBack = function () {
                    $scope.rootActions.goBack();
                };

                $scope.controlbar.goSave = function () {
                    $scope.rootActions.save().then(function () {
                        $scope.rootActions.exitSaveMode();
                    });
                };

                $scope.controlbar.goEdit = function () {
                    $scope.rootActions.goInEditionMode();
                };

                $scope.controlbar.goCancel = function () {
                    $scope.rootActions.cancel();
                };

                $scope.controlbar.goAdd = function () {
                    event.stopPropagation(); // Prevent the application to reload on mobile devices
                    $scope.rootActions.navigateNew();
                };
                $scope.controlbar.goRemove = function () {
                    $scope.rootActions.remove();
                };
                $scope.toggleSnap = function () {
                    snapRemote.toggle('left');
                };
            }
        };

    }]);
